Parameters:
  Env-Name:
    Description: Environment Name
    Type: String
    AllowedValues: [dev, prod]
    ConstraintDescription: Must be "dev" or "prod"
  App-Name: 
    Description: Application name
    Type: string
  VPC-Id:
    Description: VPC to create the SG and EC2 Instance in |
                 Must be in ca-central-1, us-east-1, or us-west-2
    Type: AWS::EC2::VPC::Id
  SG-CIDR-Ingress:
    Descripton: CIDR Ingress for SSH 
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP address in the form (x.x.x.x)
  
Mappings:
  Region-ArchAMI:
    ca-central-1:
      HVM64: ami-0fca0f98dc87d39df
    us-east-1:
      HVM64: ami-04d29b6f966df1537
    us-west-2:
      HVM64: ami-0e472933a1395e172
    
  Env-InstanceType:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [Env-InstanceType, !Ref 'Env-Name', instanceType]
      ImageId: !FindInMap [Region-ArchAMI, !Ref 'AWS::Region', HVM64]
      AvailabilityZone: !Sub ${AWS::Region}a
      SecurityGroupIds: XXXXXXX
      SubnetId: 
      Tags:
        -
          Key: Name
          Value: !Sub ${App-Name} EC2

  SSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub SG for ${App-Name}
      SecurityGroupIngress:
        - CidrIp: !Sub ${SG-CIDR-Ingress}
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      VpcId: !Ref VPCId


Outputs:
  SSHGroupId:
    Value: !Ref SSHSecurityGroup
    Description: SSH Security Group ID